-- Create database (from shell):
-- createdb -h localhost -p 5432 -U postgres testdb

-- Connect to database:
\c testdb

-- Create required tables:
CREATE TABLE student (
    stuid SERIAL PRIMARY KEY,
    email VARCHAR(255),
    address VARCHAR(255),
    trackid INTEGER,
    e_name VARCHAR(25)
);

CREATE TABLE track (
    trackid INTEGER PRIMARY KEY,
    trackname VARCHAR(255)
);

CREATE TABLE subject (
    subjectid INTEGER PRIMARY KEY,
    sub_name VARCHAR(255),
    max_score INTEGER
);

CREATE TABLE exam (
    examid INTEGER PRIMARY KEY,
    date DATE
);

-- Add foreign key constraint from student to track:
ALTER TABLE student 
ADD CONSTRAINT student_track_id FOREIGN KEY (trackid)
REFERENCES track (trackid);

-- Create grades table with foreign keys:
CREATE TABLE grades (
    stu_id INTEGER REFERENCES student (stuid),
    sub_id INTEGER REFERENCES subject (subjectid),
    exam_id INTEGER REFERENCES exam (examid),
    grade INTEGER
);

-- Create junction tables:
CREATE TABLE stu_sub (
    stu_id INTEGER REFERENCES student (stuid),
    sub_id INTEGER REFERENCES subject (subjectid)
);

CREATE TABLE track_sub (
    track_id INTEGER REFERENCES track (trackid),
    sub_id INTEGER REFERENCES subject (subjectid)
);

-- Add birthdate column:
ALTER TABLE student ADD COLUMN birthdate DATE;

-- Add enum and gender column:
CREATE TYPE gender_enum AS ENUM('female', 'male');
ALTER TABLE student ADD COLUMN gender gender_enum;

-- Insert into track:
INSERT INTO track (trackid, trackname) VALUES (1, 'Python'), (2, 'AI'), (3, 'Testing'), (4, 'OS');

-- Insert students:
INSERT INTO student (email, address, trackid, e_name) VALUES 
    ('amira@nice.com', 'Abnub', 1, 'Amira'),
    ('lola@nice.com', 'assuit', 2, 'lola'),
    ('lily@nice.com', 'cairo', 3, 'lily');

-- Add birthdate values:
UPDATE student SET birthdate = '2002-08-15' WHERE stuid = 1;
UPDATE student SET birthdate = '2004-03-05' WHERE stuid = 2;
UPDATE student SET birthdate = '1999-11-01' WHERE stuid = 3;

-- Add gender values:
UPDATE student SET gender = 'female' WHERE stuid IN (1, 2, 3);

-- Insert more students:
INSERT INTO student (stuid, email, address, trackid, e_name, birthdate, gender) VALUES 
    (4, 'mohammed@student.com', 'london', 1, 'Mohammed', '1990-03-25', 'male'),
    (5, 'mohammed@student.com', 'london', 1, 'Mohammed', '1990-03-25', 'male'),
    (6, 'mohammed@student.com', 'london', 1, 'Mohammed', '1990-03-25', 'male');

-- Insert subjects:
INSERT INTO subject VALUES
    (1, 'problem solving', 100),
    (2, 'Clean code', 70),
    (3, 'Algorithms', 90);

-- Insert exams:
INSERT INTO exam VALUES
    (101, '2025-05-05'),
    (102, '2025-05-04'),
    (103, '2025-05-06');

-- Insert grades:
INSERT INTO grades (sub_id, exam_id, grade) VALUES
    (1, 101, 85),
    (2, 102, 90),
    (3, 103, 78);

-- Insert into stu_sub:
INSERT INTO stu_sub (sub_id) VALUES (1), (2), (3);

-- Insert into track_sub:
INSERT INTO track_sub (track_id, sub_id) VALUES
    (1, 1),
    (2, 2),
    (3, 3);

-- Queries
-- Get student info with track name (subquery version):
SELECT e_name, 
    (SELECT trackname FROM track WHERE track.trackid = student.trackid) AS track_name
FROM student;

-- Get students not in OS track:
SELECT * FROM student
WHERE trackid != (SELECT trackid FROM track WHERE trackname = 'OS');

-- Grouping and Counting
SELECT COUNT(*), gender FROM student GROUP BY gender;
SELECT COUNT(*), e_name FROM student GROUP BY e_name;
SELECT COUNT(*), e_name FROM student GROUP BY e_name HAVING COUNT(*) > 2;

-- Filtering by birthdate and gender
SELECT * FROM student
WHERE gender = 'female' AND birthdate > '1999-01-01';

-- Filter names starting with 'A'
SELECT * FROM student WHERE e_name LIKE 'A%';

-- Get subject with highest max_score
SELECT * FROM subject ORDER BY max_score DESC LIMIT 1;
